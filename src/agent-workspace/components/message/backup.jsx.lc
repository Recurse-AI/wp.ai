"use client";

import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactMarkdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus, prism } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { useTheme } from '@/context/ThemeProvider';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';
import 'katex/dist/katex.min.css';
import { Copy, Check, ExternalLink, Folder, FileText, File, Code as CodeIcon } from 'lucide-react';

// Add type declarations for modules without types
declare module 'remark-math';
declare module 'rehype-katex';

// Custom interfaces
interface CodeProps {
  node?: any;
  inline?: boolean;
  className?: string;
  children?: React.ReactNode;
  [key: string]: any;
}

interface MessageContentProps {
  content: string;
  isComplete?: boolean;
  isStreaming?: boolean;
  containerRef?: React.RefObject<HTMLDivElement>;
  hideCodeInMessages?: boolean;
}

// Helper function to detect language from code content
const detectLanguage = (code: string, fallback?: string): string => {
  if (fallback && fallback !== 'text') return fallback;
  
  // Detect common languages from content patterns
  if (code.includes('<?php') || code.includes('<?=')) return 'php';
  if (code.includes('<template') && code.includes('<script')) return 'vue';
  if (code.includes('import React') || code.includes('React.')) return 'jsx';
  if (code.includes('function') && code.includes('=>')) return 'javascript';
  if (code.includes('const') && code.includes('import') && code.includes('from')) return 'typescript';
  if (code.includes('<html') || code.includes('<!DOCTYPE')) return 'html';
  if (code.includes('@media') || code.includes('@import')) return 'css';
  
  return fallback || 'text';
};

// Function to render file hierarchy
const renderFileHierarchy = (content: string, isDark: boolean) => {
  // Check if this is a file structure block
  if (content.includes('File:') || content.includes('📂') || /^\s*[├└─│]/.test(content)) {
    // Extract file structure lines and organize them
    const lines = content.split('\n').filter(line => line.trim());
    let rootFolder = '';
    
    // Try to identify root folder
    if (lines.length > 0 && lines[0].includes('📂')) {
      rootFolder = lines[0].replace('📂', '').trim();
    }
    
    return (
      <div className={`rounded-md overflow-hidden my-3 ${
        isDark ? 'bg-gray-800/80 border-l-2 border-blue-600' : 'bg-gray-900/90 border-l-2 border-green-600'
      }`}>
        <div className={`flex items-center justify-between px-4 py-2 text-xs ${
          isDark ? 'bg-gray-700/80 text-gray-200' : 'bg-gray-800/90 text-green-300'
        }`}>
          <div className="flex items-center">
            <Folder className={`w-4 h-4 mr-2 ${isDark ? 'text-blue-400' : 'text-green-500'}`} />
            <span className="font-medium">{rootFolder ? `Plugin Structure: ${rootFolder}` : 'File Structure'}</span>
          </div>
        </div>
        <div className={`p-3 font-mono text-sm ${
          isDark ? 'text-gray-300' : 'text-green-400'
        }`}>
          {lines.map((line, index) => {
            // Calculate indentation level based on directory nesting
            const indentMatch = line.match(/^\s+/);
            const indentLevel = indentMatch ? Math.floor(indentMatch[0].length / 2) : 0;
            
            // Style based on line content
            let lineClass = 'whitespace-pre flex items-center py-0.5';
            
            if (line.includes('📂')) {
              lineClass += isDark ? ' text-blue-400' : ' text-green-500';
            } else if (line.includes('📄')) {
              lineClass += isDark ? ' text-gray-300' : ' text-green-400';
            } else if (line.includes('🐘')) {
              lineClass += ' text-purple-500';
            } else if (line.includes('📜')) {
              lineClass += ' text-yellow-500';
            } else if (line.includes('🎨')) {
              lineClass += ' text-pink-500';
            } else if (line.includes('└─') || line.includes('┌─')) {
              lineClass += isDark ? ' text-gray-500' : ' text-green-700';
            }
            
            // Format file path with proper indentation and tree structure
            return (
              <div key={index} className={lineClass} style={{ paddingLeft: `${indentLevel * 0.75}rem` }}>
                {index > 0 && (
                  <span className={`mr-2 ${isDark ? 'text-gray-500' : 'text-green-700'}`}>
                    {line.includes('📂') ? '├─' : index === lines.length - 1 ? '└─' : '├─'}
                  </span>
                )}
                {line.trim()}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
  return null;
};

const MessageContent: React.FC<MessageContentProps> = ({
  content,
  isComplete = true,
  isStreaming = false,
  containerRef: externalContainerRef,
  hideCodeInMessages = false
}) => {
  const localContainerRef = useRef<HTMLDivElement>(null);
  const containerRef = externalContainerRef || localContainerRef;
  const { theme } = useTheme();
  const isDark = theme === 'dark';
  const [showCursorBlink, setShowCursorBlink] = useState(isStreaming);
  
  // Handle code copying
  const [copiedCode, setCopiedCode] = useState<string | null>(null);
  
  const handleCopyCode = useCallback((code: string) => {
    if (navigator.clipboard) {
      navigator.clipboard.writeText(code).then(() => {
        setCopiedCode(code);
        setTimeout(() => setCopiedCode(null), 2000);
      }).catch(err => {
        console.error('Failed to copy code:', err);
      });
    }
  }, []);
  
  const isCodeCopied = useCallback((code: string) => {
    return code === copiedCode;
  }, [copiedCode]);

  // Add cursor blinking effect for streaming
  useEffect(() => {
    setShowCursorBlink(isStreaming);
    
    if (isStreaming && containerRef.current) {
      // Scroll to the bottom of the content when streaming
      containerRef.current.scrollTo({
        top: containerRef.current.scrollHeight,
        behavior: 'smooth'
      });
    }
    
    // Remove blinking cursor when streaming stops
    if (!isStreaming) {
      const timer = setTimeout(() => {
        setShowCursorBlink(false);
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [isStreaming, containerRef, content]);

  // Determine if we should use terminal styling for the content
  const isTerminalOutput = content.includes('$') && content.includes('\n') && !content.includes('```');
  
  // Process code blocks and file reference blocks
  const processedContent = React.useMemo(() => {
    if (!content) return '';
    
    let processed = content;
    
    // Handle terminal-like output without proper markdown
    if (isTerminalOutput) {
      processed = '```bash\n' + processed + '\n```';
    }
    
    // Handle file path blocks
    processed = processed.replace(/┌─\s*File:\s*([^\n]+)\n│\s*[^└]([^\n]*)\n└─[^\n]*/g, (match) => {
      return `\n\n<div class="file-reference-block">${match}</div>\n\n`;
    });
    
    // Filter code blocks if hideCodeInMessages is true
    if (hideCodeInMessages) {
      processed = processed.replace(/```[\s\S]*?```/g, (match) => {
        // Keep file structure blocks
        if (match.includes('tree') || 
            /[├└─│]/.test(match) || 
            match.includes('/') ||
            match.includes('File:') ||
            match.includes('📂')) {
          return match;
        }
        return '[Code available in File Explorer]';
      });
    }
    
    return processed;
  }, [content, isTerminalOutput, hideCodeInMessages]);

  // Enhance directory listings display
  const enhanceDirectoryDisplay = useCallback(() => {
    if (!containerRef.current) return;
    
    // Find directory listings in the message content
    const directoryListings = containerRef.current.querySelectorAll('p');
    
    directoryListings.forEach(listing => {
      const text = listing.textContent || '';
      
      // Check if this paragraph is a directory header
      if (text.match(/(?:Folder|Directory):\s*.+\s*Contents of directory:/)) {
        listing.classList.add('font-medium', 'mt-4', 'mb-2');
        
        // Find the folder name
        const folderNameMatch = text.match(/(?:Folder|Directory):\s*(.+?)\s*Contents/);
        if (folderNameMatch && folderNameMatch[1]) {
          const folderName = folderNameMatch[1].trim();
          
          // Replace the content with styled version
          listing.innerHTML = `
            <div class="flex items-center gap-2 text-blue-600 dark:text-blue-400">
              <span class="inline-block">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"></path>
                </svg>
              </span>
              <span>${folderName}</span>
            </div>
            <div class="text-sm text-gray-500 dark:text-gray-400 mt-1">Contents of directory:</div>
          `;
        }
      }
      
      // Check if this is a file or directory entry
      const fileMatch = text.match(/\[file\]\s+([^\s(]+)(?:\s+\(([^)]+)\))?/);
      const dirMatch = text.match(/\[dir\]\s+([^\s(]+)(?:\s*\(([^)]+)\))?/);
      
      if (fileMatch || dirMatch) {
        const isDir = !!dirMatch;
        const name = (fileMatch ? fileMatch[1] : dirMatch?.[1]) || '';
        const meta = (fileMatch ? fileMatch[2] : dirMatch?.[2]) || '';
        
        // Create styled version
        listing.classList.add('pl-6', 'py-1', 'flex', 'items-center', 'gap-2');
        
        if (isDir) {
          listing.innerHTML = `
            <span class="inline-block text-yellow-500">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"></path>
              </svg>
            </span>
            <span class="flex-grow">${name}</span>
            ${meta ? `<span class="text-xs text-gray-500">${meta}</span>` : ''}
          `;
        } else {
          listing.innerHTML = `
            <span class="inline-block text-gray-500">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
              </svg>
            </span>
            <span class="flex-grow">${name}</span>
            ${meta ? `<span class="text-xs text-gray-500">${meta}</span>` : ''}
          `;
        }
      }
    });
  }, [containerRef]);

  // Process content updates
  useEffect(() => {
    if (containerRef.current) {
      // Process after render
      const timer = setTimeout(() => {
        enhanceDirectoryDisplay();
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [content, enhanceDirectoryDisplay, containerRef]);

  // Custom components for ReactMarkdown
  const CodeBlock = useCallback(({ inline, className, children, ...props }: CodeProps) => {
    const match = /language-(\w+)/.exec(className || '');
    const codeContent = String(children || '').replace(/\n$/, '');
    
    if (!inline && match) {
      // Detect language or use specified language
      const language = match[1] || 'text';
      const detectedLang = detectLanguage(codeContent, language);
      
      // Special handling for file structure blocks
      if (
        language === 'tree' || 
        language === 'plaintext' || 
        codeContent.includes('File:') || 
        codeContent.includes('📂') || 
        /^\s*[├└─│]/.test(codeContent)
      ) {
        return renderFileHierarchy(codeContent, isDark) || (
          <div className={`rounded-lg overflow-hidden my-2 ${
            isDark ? 'bg-gray-800 border border-gray-700' : 'bg-gray-50 border border-gray-200'
          }`}>
            <div className={`flex items-center px-4 py-2 text-xs ${
              isDark ? 'bg-gray-700 text-gray-300' : 'bg-gray-200 text-gray-600'
            }`}>
              <Folder className="w-4 h-4 mr-2 text-blue-500" />
              <span className="font-medium">File Structure</span>
            </div>
            <div className={`p-3 font-mono text-sm whitespace-pre ${
              isDark ? 'text-gray-300' : 'text-gray-700'
            }`}>
              {codeContent}
            </div>
          </div>
        );
      }
      
      // Determine icon based on language
      let langIcon = <CodeIcon className="w-4 h-4 mr-2 text-blue-500" />;
      if (detectedLang === 'php') {
        langIcon = <span className="mr-2 text-purple-500">🐘</span>;
      } else if (['javascript', 'js', 'jsx', 'ts', 'tsx'].includes(detectedLang || '')) {
        langIcon = <span className="mr-2 text-yellow-500">📜</span>;
      } else if (['css', 'scss', 'sass'].includes(detectedLang || '')) {
        langIcon = <span className="mr-2 text-pink-500">🎨</span>;
      } else if (['html', 'xml'].includes(detectedLang || '')) {
        langIcon = <span className="mr-2 text-orange-500">🌐</span>;
      }
      
      // Skip rendering code blocks if hideCodeInMessages is true
      if (hideCodeInMessages) {
        return null;
      }
      
      return (
        <div className={`rounded-lg overflow-hidden my-2 ${
          isDark ? 'bg-gray-800 border border-gray-700' : 'bg-gray-50 border border-gray-200'
        }`}>
          <div className={`flex items-center justify-between px-4 py-2 text-xs ${
            isDark ? 'bg-gray-700 text-gray-300' : 'bg-gray-200 text-gray-600'
          }`}>
            <div className="flex items-center">
              {langIcon}
              <span className="font-medium">{detectedLang || language}</span>
            </div>
            <button 
              className={`hover:text-blue-500 p-1 rounded-md hover:bg-opacity-20 hover:bg-gray-500 flex items-center transition-colors`} 
              title={isCodeCopied(codeContent) ? "Copied!" : "Copy code"}
              onClick={() => handleCopyCode(codeContent)}
              aria-label={isCodeCopied(codeContent) ? "Copied to clipboard" : "Copy to clipboard"}
              tabIndex={0}
            >
              {isCodeCopied(codeContent) ? (
                <Check className="w-4 h-4 text-green-500" />
              ) : (
                <Copy className="w-4 h-4" />
              )}
            </button>
          </div>
          <SyntaxHighlighter
            language={detectedLang || language}
            style={isDark ? vscDarkPlus : prism}
            customStyle={{
              margin: 0,
              padding: '12px 16px', 
              background: isDark ? '#1f2937' : '#0f1219',
              fontSize: '0.875rem',
              borderRadius: language ? '0 0 6px 6px' : '6px',
              color: isDark ? '#e5e7eb' : '#4ade80',
            }}
            PreTag="div"
            {...props}
          >
            {codeContent}
          </SyntaxHighlighter>
        </div>
      );
    }
    
    // For inline code
    if (inline) {
      return (
        <code
          className={`px-1 py-0.5 rounded text-sm font-mono ${
            isDark ? 'bg-gray-800 text-pink-200' : 'bg-gray-100 text-pink-800'
          }`}
          {...props}
        >
          {children}
        </code>
      );
    }
    
    // Default for non-language code blocks
    return (
      <div className={`p-3 rounded-md my-3 font-mono text-sm overflow-x-auto ${
        isDark ? 'bg-gray-800 text-gray-300' : 'bg-gray-100 text-gray-800'
      }`}>
        <pre className="whitespace-pre-wrap break-words">
          {children}
        </pre>
      </div>
    );
  }, [isDark, isCodeCopied, handleCopyCode, hideCodeInMessages]);

  return (
    <div 
      ref={containerRef} 
      className={`markdown-content ${showCursorBlink ? 'agent-chat-cursor' : ''}`}
    >
      <ReactMarkdown
        components={{
          code: CodeBlock,
          p: ({ children }) => <p className="my-2">{children}</p>,
          a: ({ href, children, ...props }) => {
            const isExternal = href?.startsWith('http');
            return (
              <a 
                href={href} 
                target={isExternal ? "_blank" : undefined} 
                rel={isExternal ? "noopener noreferrer" : undefined}
                className={`${isDark ? 'text-blue-400' : 'text-blue-600'} hover:underline`}
                {...props}
              >
                {children}
                {isExternal && (
                  <span className="inline-block align-text-bottom ml-1">
                    <ExternalLink size={12} />
                  </span>
                )}
              </a>
            );
          },
          ul: ({ children }) => <ul className="list-disc pl-6 my-2">{children}</ul>,
          ol: ({ children }) => <ol className="list-decimal pl-6 my-2">{children}</ol>,
          li: ({ children }) => <li className="my-1">{children}</li>,
          h1: ({ children }) => <h1 className="text-xl font-bold my-3">{children}</h1>,
          h2: ({ children }) => <h2 className="text-lg font-bold my-3">{children}</h2>,
          h3: ({ children }) => <h3 className="text-base font-bold my-2">{children}</h3>,
          h4: ({ children }) => <h4 className="text-sm font-bold my-2">{children}</h4>,
          blockquote: ({ children }) => (
            <blockquote className={`border-l-4 pl-4 my-3 ${
              isDark ? 'border-gray-600 text-gray-400' : 'border-gray-300 text-gray-600'
            }`}>
              {children}
            </blockquote>
          ),
        }}
        remarkPlugins={[remarkGfm, remarkMath]}
        rehypePlugins={[rehypeKatex]}
      >
        {processedContent}
      </ReactMarkdown>

      <style jsx global>{`
        .agent-chat-cursor::after {
          content: '▌';
          display: inline-block;
          animation: blink 1s infinite;
          margin-left: 2px;
          color: ${isDark ? '#6ee7b7' : '#10b981'};
          font-weight: bold;
        }
        
        @keyframes blink {
          0%, 100% { opacity: 1; }
          50% { opacity: 0; }
        }
        
        /* File listing styles */
        .file-reference-block {
          background: ${isDark ? 'rgba(30, 41, 59, 0.5)' : 'rgba(15, 23, 42, 0.5)'};
          border-radius: 6px;
          padding: 0.75rem;
          font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
          font-size: 0.875rem;
          border-left: 2px solid ${isDark ? '#3b82f6' : '#10b981'};
          white-space: pre;
          margin: 1rem 0;
        }
        
        .markdown-content pre {
          max-width: 100%;
          overflow-x: auto;
        }
        
        .markdown-content img {
          max-width: 100%;
          height: auto;
        }
        
        /* Prevent overflow */
        * {
          box-sizing: border-box;
        }
        
        code, pre {
          white-space: pre-wrap !important;
          word-break: break-word !important;
        }
      `}</style>
    </div>
  );
};

export default MessageContent; 